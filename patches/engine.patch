diff --git a/engine/src/build/config/BUILDCONFIG.gn b/engine/src/build/config/BUILDCONFIG.gn
index b74b2e2..b181c74 100644
--- a/engine/src/build/config/BUILDCONFIG.gn
+++ b/engine/src/build/config/BUILDCONFIG.gn
@@ -369,13 +369,13 @@ if (is_msan && !is_linux) {
 # duplication in each target below.
 _native_compiler_configs = [
   "//build/config:feature_flags",
-  "//build/config/compiler:compiler",
+  "//build/config/termux:compiler",
   "//build/config/compiler:cxx_version_default",
   "//build/config/compiler:compiler_arm_fpu",
   "//build/config/compiler:chromium_code",
   "//build/config/compiler:default_include_dirs",
   "//build/config/compiler:no_rtti",
-  "//build/config/compiler:runtime_library",
+  "//build/config/termux:runtime_library",
 ]
 
 if (use_flutter_cxx) {
@@ -403,7 +403,11 @@ if (is_posix) {
   ]
 }
 
-if (is_linux) {
+import("//build/config/termux/termux.gni")
+
+if (is_termux) {
+  _native_compiler_configs += [ "//build/config/termux:sdk" ]
+} else if (is_linux) {
   _native_compiler_configs += [ "//build/config/linux:sdk" ]
 } else if (is_mac) {
   _native_compiler_configs += [ "//build/config/mac:sdk" ]
@@ -483,7 +487,7 @@ if (is_win) {
     "//build/config/mac:mac_executable_flags",
   ]
 } else if (is_linux || is_android) {
-  _executable_configs += [ "//build/config/gcc:executable_ldconfig" ]
+  _executable_configs += [ "//build/config/termux:executable_ldconfig" ]
   if (is_android) {
     _executable_configs += [ "//build/config/android:executable_config" ]
   }
@@ -547,7 +551,10 @@ import("//build/toolchain/custom/custom.gni")
 # shlib_toolchain is a Fuchsia-specific symbol and not used by Flutter.
 shlib_toolchain = false
 
-if (custom_toolchain != "") {
+if (is_termux) {
+  host_toolchain = "//build/toolchain/linux:clang_$host_cpu"
+  set_default_toolchain("//build/toolchain/termux:$current_cpu")
+} else if (custom_toolchain != "") {
   assert(custom_sysroot != "")
   assert(custom_target_triple != "")
   host_toolchain = "//build/toolchain/linux:clang_$host_cpu"
@@ -625,6 +632,9 @@ if (custom_toolchain != "") {
 } else {
   assert(false, "Toolchain not set because of unknown platform.")
 }
+if (is_termux_host) {
+  host_toolchain = "//build/toolchain/termux:$host_cpu"
+}
 
 # Sets default dependencies for executable and shared_library targets.
 #
diff --git a/engine/src/build/config/sysroot.gni b/engine/src/build/config/sysroot.gni
index 5f7e48a..0f9c2e3 100644
--- a/engine/src/build/config/sysroot.gni
+++ b/engine/src/build/config/sysroot.gni
@@ -17,6 +17,8 @@ declare_args() {
 
 if (current_toolchain == default_toolchain && target_sysroot != "") {
   sysroot = target_sysroot
+} else if (is_termux && custom_sysroot != "") {
+  sysroot = custom_sysroot
 } else if (is_android) {
   import("//build/config/android/config.gni")
   sysroot = rebase_path("$android_toolchain_root/sysroot", root_build_dir)
diff --git a/engine/src/build/config/termux/BUILD.gn b/engine/src/build/config/termux/BUILD.gn
new file mode 100644
index 0000000..8208b13
--- /dev/null
+++ b/engine/src/build/config/termux/BUILD.gn
@@ -0,0 +1,174 @@
+import("//build/config/termux/termux.gni")
+import("//build/config/sysroot.gni")
+import("//build/config/profiler.gni")
+
+config("compiler") {
+  if (current_toolchain == "//build/toolchain/termux:${current_cpu}") {
+    cflags = [
+      "-fno-strict-aliasing",
+      "-fstack-protector",
+      "--param=ssp-buffer-size=8",
+      "-fPIC",
+      "-pipe",
+      "-fcolor-diagnostics",
+      "-ffunction-sections",
+      "-funwind-tables",
+      "-fno-short-enums",
+      "-nostdinc++",
+    ]
+    cflags_cc = ["-fvisibility-inlines-hidden"]
+    cflags_objcc = ["-fvisibility-inlines-hidden"]
+    ldflags = [
+      "-Wl,--fatal-warnings",
+      "-fPIC",
+      "-Wl,-z,noexecstack",
+      "-Wl,-z,now",
+      "-Wl,-z,relro",
+      "-Wl,--undefined-version",
+      "-Wl,--no-undefined",
+      "-Wl,--exclude-libs,ALL",
+      "-Wl,--icf=all",
+      "-Wl,-z,max-page-size=65536",
+    ]
+    defines = [
+      "__TERMUX__",
+      "HAVE_SYS_UIO_H"
+    ]
+    if (!using_sanitizer) {
+      ldflags += [ "-Wl,-z,defs" ]
+    }
+    if (enable_profiling && !is_debug) {
+      defines += [ "ENABLE_PROFILING" ]
+      cflags += [
+        "-fno-omit-frame-pointer",
+        "-mno-omit-leaf-frame-pointer",
+        "-g",
+      ]
+
+      if (enable_full_stack_frames_for_profiling) {
+        cflags += [
+          "-fno-inline",
+          "-fno-optimize-sibling-calls",
+        ]
+      }
+      ldflags += [ "-rdynamic" ]
+    }
+    if (using_sanitizer) {
+      cflags += [
+        "-fno-omit-frame-pointer",
+        "-gline-tables-only",
+      ]
+    }
+    if (is_asan) {
+      cflags += [ "-fsanitize=address" ]
+      ldflags += [ "-fsanitize=address" ]
+    }
+    if (is_lsan) {
+      cflags += [ "-fsanitize=leak" ]
+      ldflags += [ "-fsanitize=leak" ]
+    }
+    if (is_tsan) {
+      cflags += [ "-fsanitize=thread" ]
+      ldflags += [ "-fsanitize=thread" ]
+    }
+    if (is_msan) {
+      cflags += [ "-fsanitize=memory" ]
+      ldflags += [ "-fsanitize=memory" ]
+    }
+    if (is_ubsan) {
+      cflags += [ "-fsanitize=undefined" ]
+      ldflags += [ "-fsanitize=undefined" ]
+    }
+    if (current_cpu == "x64") {
+      cflags += [
+        "-m64",
+        "-march=x86-64",
+      ]
+      ldflags += [ "-m64" ]
+    } else if (current_cpu == "x86") {
+      cflags += [ "-m32" ]
+      ldflags += [ "-m32" ]
+      if (is_clang) {
+        cflags += [
+          "-mstack-alignment=16",
+          "-mstackrealign",
+        ]
+      }
+    } else if (current_cpu == "arm") {
+      cflags += [
+        "-march=$arm_arch",
+        "-mfloat-abi=$arm_float_abi",
+      ]
+      if (arm_tune != "") {
+        cflags += [ "-mtune=$arm_tune" ]
+      }
+      if (arm_use_thumb) {
+        cflags += [ "-mthumb" ]
+      }
+    }
+    if (current_cpu == "arm") {
+      cflags += [ "--target=arm-linux-androideabi${termux_api_level}" ]
+      ldflags += [ "--target=arm-linux-androideabi${termux_api_level}" ]
+    } else if (current_cpu == "arm64") {
+      cflags += [ "--target=aarch64-linux-android${termux_api_level}" ]
+      ldflags += [ "--target=aarch64-linux-android${termux_api_level}" ]
+    } else if (current_cpu == "x86") {
+      cflags += [ "--target=i686-linux-androideabi${termux_api_level}" ]
+      ldflags += [ "--target=i686-linux-androideabi${termux_api_level}" ]
+    } else if (current_cpu == "x64") {
+      cflags += [ "--target=x86_64-linux-androideabi${termux_api_level}" ]
+      ldflags += [ "--target=x86_64-linux-androideabi${termux_api_level}" ]
+    }
+    asmflags = cflags
+  } else {
+    configs = ["//build/config/compiler:compiler"]
+  }
+}
+
+config("runtime_library") {
+  if (current_toolchain == "//build/toolchain/termux:${current_cpu}") {
+    cflags_cc = ["-nostdinc++"]
+    cflags_objcc = [ "-nostdinc++" ]
+    defines = [
+      "__compiler_offsetof=__builtin_offsetof",
+      "nan=__builtin_nan"
+    ]
+    ldflags = [
+      "-stdlib=libstdc++",
+      "-Wl,--warn-shared-textrel"
+    ]
+    lib_dirs = [ "$custom_toolchain/lib/clang/19/lib/linux/" ]
+    include_dirs = [
+      "//flutter/third_party/libcxx/include",
+      "//flutter/third_party/libcxxabi/include",
+    ]
+  } else {
+    configs = ["//build/config/compiler:runtime_library"]
+  }
+}
+
+config("executable_ldconfig") {
+  if (current_toolchain == "//build/toolchain/termux:${current_cpu}") {
+    ldflags = [
+      "-Bdynamic",
+      "-Wl,-z,nocopyreloc",
+    ]
+  } else {
+    configs = ["//build/config/gcc:executable_ldconfig"]
+  }
+}
+
+# TODO: limit to linux:sdk
+config("sdk") {
+  cflags = []
+  ldflags = [ "-Wl,-rpath=/data/data/com.termux/files/usr/lib" ]
+  libs = [ "log" ]  # Add Android log library for __android_log_write
+  lib_dirs = [ "$custom_toolchain/lib/clang/19/lib/linux/" ]
+  if (defined(target_sysroot) && target_sysroot != "") {
+    cflags += [ "--sysroot=" + target_sysroot ]
+    ldflags += [ "--sysroot=" + target_sysroot ]
+  }
+  if (defined(custom_sysroot) && custom_sysroot != "") {
+    cflags += [ "-idirafter$custom_sysroot/usr/include" ]
+    lib_dirs += [ "$custom_sysroot/usr/lib" ]
+  }
+}
diff --git a/engine/src/build/config/termux/termux.gni b/engine/src/build/config/termux/termux.gni
new file mode 100644
index 0000000..0d97976
--- /dev/null
+++ b/engine/src/build/config/termux/termux.gni
@@ -0,0 +1,6 @@
+declare_args() {
+  termux_api_level = 26
+
+  is_termux = false
+  is_termux_host = false
+}
diff --git a/engine/src/build/toolchain/termux/BUILD.gn b/engine/src/build/toolchain/termux/BUILD.gn
new file mode 100644
index 0000000..564c582
--- /dev/null
+++ b/engine/src/build/toolchain/termux/BUILD.gn
@@ -0,0 +1,40 @@
+import("//build/toolchain/gcc_toolchain.gni")
+import("//build/config/android/config.gni")
+import("//build/config/termux/termux.gni")
+import("//build/toolchain/custom/custom.gni")
+
+template("termux_toolchain") {
+  gcc_toolchain(target_name) {
+    assert(defined(custom_toolchain) && custom_toolchain != "")
+
+    is_clang = true
+    toolchain_os = "linux"
+    toolchain_cpu = invoker.toolchain_cpu
+
+    prefix = "$custom_toolchain/bin"
+    cc = prefix + "/clang"
+    cxx = prefix + "/clang++"
+    asm = prefix + "/clang"
+    ar = prefix + "/llvm-ar"
+    ld = prefix + "/clang++"
+    readelf = prefix + "/llvm-readelf"
+    nm = prefix + "/llvm-nm"
+    strip = prefix + "/llvm-strip"
+  }
+}
+
+termux_toolchain("arm64"){
+  toolchain_cpu = "arm64"
+}
+
+termux_toolchain("arm"){
+  toolchain_cpu = "arm"
+}
+
+termux_toolchain("x64"){
+  toolchain_cpu = "x64"
+}
+
+termux_toolchain("x86"){
+  toolchain_cpu = "x86"
+}
diff --git a/engine/src/flutter/shell/testing/BUILD.gn b/engine/src/flutter/shell/testing/BUILD.gn
index 28a19c7..5c3992b 100644
--- a/engine/src/flutter/shell/testing/BUILD.gn
+++ b/engine/src/flutter/shell/testing/BUILD.gn
@@ -56,6 +56,10 @@ executable("testing") {
       "//flutter/impeller",
       "//flutter/third_party/swiftshader/src/Vulkan:swiftshader_libvulkan_static",
     ]
+    if (is_termux) {
+      libs += [ "vk_swiftshader" ]
+      deps -= [ "//flutter/third_party/swiftshader/src/Vulkan:swiftshader_libvulkan_static" ]
+    }
   }
 
   metadata = {

