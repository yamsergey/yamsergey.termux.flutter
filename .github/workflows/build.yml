name: build

on:
  workflow_dispatch:
jobs:
  Ubuntu:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: install deps
      run: sudo apt update && sudo apt install libfreetype-dev ninja-build -y

    - name: setup depot-tools
      uses: newkdev/setup-depot-tools@v1.0.1

    - name: install python requirements
      run: pip install -r requirements.txt

    - name: build with pre-validation
      run: |
        echo "Starting Flutter build with BUILD.gn pre-validation..."
        python build.py || echo "Build failed, continuing to validation..."

    - name: comprehensive BUILD.gn validation and fix
      run: |
        echo "=== Pre-build BUILD.gn validation and fix ==="
        
        if [ -f "flutter/engine/src/build/config/termux/BUILD.gn" ]; then
          echo "termux BUILD.gn EXISTS after patch application"
          echo ""
          echo "=== File statistics ==="
          wc -l flutter/engine/src/build/config/termux/BUILD.gn
          echo ""
          echo "=== Last 10 lines with line numbers ==="
          tail -10 flutter/engine/src/build/config/termux/BUILD.gn | cat -n
          echo ""
          echo "=== Hex dump of last 100 bytes ==="
          tail -c 100 flutter/engine/src/build/config/termux/BUILD.gn | hexdump -C
          echo ""
          
          # Check file structure and fix if needed
          LINE_COUNT=$(wc -l < flutter/engine/src/build/config/termux/BUILD.gn)
          echo "File has $LINE_COUNT lines"
          
          # Look for config("sdk") block and ensure it's properly closed
          if grep -q 'config("sdk")' flutter/engine/src/build/config/termux/BUILD.gn; then
            echo "Found config('sdk') block"
            
            # Check if the file ends properly by looking for the specific pattern
            LAST_5_LINES=$(tail -5 flutter/engine/src/build/config/termux/BUILD.gn)
            echo "=== Last 5 lines ==="
            echo "$LAST_5_LINES"
            
            # Count braces in the sdk config section
            SDK_SECTION=$(sed -n '/config("sdk")/,$p' flutter/engine/src/build/config/termux/BUILD.gn)
            OPEN_BRACES=$(echo "$SDK_SECTION" | grep -o '{' | wc -l)
            CLOSE_BRACES=$(echo "$SDK_SECTION" | grep -o '}' | wc -l)
            echo "SDK section: Open braces=$OPEN_BRACES, Close braces=$CLOSE_BRACES"
            
            if [ "$OPEN_BRACES" -gt "$CLOSE_BRACES" ]; then
              echo "=== FIXING: Missing closing brace detected ==="
              echo "}" >> flutter/engine/src/build/config/termux/BUILD.gn
              echo "Added missing closing brace"
              
              echo "=== File after fix ==="
              tail -5 flutter/engine/src/build/config/termux/BUILD.gn | cat -n
            else
              echo "Brace count appears correct"
            fi
          else
            echo "ERROR: config('sdk') block not found!"
          fi
          
          # Validate GN syntax and Android log library
          echo "=== Final validation ==="
          if tail -1 flutter/engine/src/build/config/termux/BUILD.gn | grep -q '^}$'; then
            echo "File ends with closing brace - looks good"
          else
            echo "WARNING: File does not end with closing brace"
            echo "Last line: '$(tail -1 flutter/engine/src/build/config/termux/BUILD.gn)'"
          fi
          
          # Check for Android log library fix
          if grep -q 'libs = \[ "log" \]' flutter/engine/src/build/config/termux/BUILD.gn; then
            echo "✓ Android log library fix is present"
          else
            echo "✗ WARNING: Android log library fix is MISSING!"
            echo "This will cause __android_log_write linking errors"
          fi
          
        else
          echo "ERROR: termux BUILD.gn does NOT exist after patch application"
          echo "This indicates patch application failed completely"
          exit 1
        fi

    - name: fallback - recreate BUILD.gn if needed
      run: |
        echo "=== Fallback BUILD.gn recreation if needed ==="
        
        # Check if we need to recreate the file due to persistent syntax errors
        if [ -f "flutter/engine/src/build/config/termux/BUILD.gn" ]; then
          # Test the file by checking if it has proper structure AND Android log library
          if ! grep -q 'config("sdk")' flutter/engine/src/build/config/termux/BUILD.gn || \
             [ $(grep -c '{' flutter/engine/src/build/config/termux/BUILD.gn) -ne $(grep -c '}' flutter/engine/src/build/config/termux/BUILD.gn) ] || \
             ! grep -q 'libs = \[ "log" \]' flutter/engine/src/build/config/termux/BUILD.gn; then
            echo "BUILD.gn missing Android log library or has structural issues, recreating from scratch..."
            
            # Backup the problematic file
            cp flutter/engine/src/build/config/termux/BUILD.gn flutter/engine/src/build/config/termux/BUILD.gn.backup
            
            # Create the corrected BUILD.gn file using external script
            echo "Recreating BUILD.gn with guaranteed correct structure using script..."
            bash scripts/create_build_gn.sh
            
            echo "=== Immediately retrying build with corrected BUILD.gn ==="
            if python build.py; then
              echo "✓ BUILD SUCCESS after BUILD.gn recreation!"
              exit 0
            else
              echo "✗ Build still failed even with recreated BUILD.gn"
              exit 1
            fi
            
          else
            echo "BUILD.gn appears to have correct structure, but build failed for other reasons"
            echo "=== Last 5 lines of current BUILD.gn ==="
            tail -5 flutter/engine/src/build/config/termux/BUILD.gn | cat -n
          fi
        else
          echo "BUILD.gn does not exist, patches were not applied"
        fi

    - name: build
      run: python build.py

    - name: debug - check termux BUILD.gn after build failure
      if: failure()
      run: |
        echo "=== Checking termux BUILD.gn after build failure ==="
        if [ -f "flutter/engine/src/build/config/termux/BUILD.gn" ]; then
          echo "=== termux BUILD.gn content after patch ==="
          cat flutter/engine/src/build/config/termux/BUILD.gn
          echo ""
          echo "=== Line count ==="
          wc -l flutter/engine/src/build/config/termux/BUILD.gn
          echo ""
          echo "=== Last 10 lines with line numbers ==="
          tail -10 flutter/engine/src/build/config/termux/BUILD.gn | cat -n
          echo ""
          echo "=== Hex dump of last 50 bytes ==="
          tail -c 50 flutter/engine/src/build/config/termux/BUILD.gn | hexdump -C
        else
          echo "termux BUILD.gn still does NOT exist after build failure"
        fi

    - name: parse tag
      id: parser
      run: |
        TAG=$(NO_RECORD=1 python build.py tag)
        echo "TAG=$TAG" >> $GITHUB_OUTPUT
        echo "TITLE=Flutter $TAG" >> $GITHUB_OUTPUT

    - name: release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.parser.outputs.TAG }}
        name: ${{ steps.parse_toml.outputs.TITLE }}
        files: '**/*.deb'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
