name: build

on:
  workflow_dispatch:
jobs:
  Ubuntu:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: install deps
      run: sudo apt update && sudo apt install libfreetype-dev ninja-build -y

    - name: setup depot-tools
      uses: newkdev/setup-depot-tools@v1.0.1

    - name: install python requirements
      run: pip install -r requirements.txt

    - name: comprehensive BUILD.gn validation and fix
      run: |
        echo "=== Comprehensive BUILD.gn debugging and fixing ==="
        
        if [ -f "flutter/engine/src/build/config/termux/BUILD.gn" ]; then
          echo "termux BUILD.gn EXISTS after patch application"
          echo ""
          echo "=== Complete file content ==="
          cat -n flutter/engine/src/build/config/termux/BUILD.gn
          echo ""
          echo "=== File statistics ==="
          wc -l flutter/engine/src/build/config/termux/BUILD.gn
          echo ""
          echo "=== Last 10 lines with line numbers ==="
          tail -10 flutter/engine/src/build/config/termux/BUILD.gn | cat -n
          echo ""
          echo "=== Hex dump of last 100 bytes ==="
          tail -c 100 flutter/engine/src/build/config/termux/BUILD.gn | hexdump -C
          echo ""
          
          # Check file structure and fix if needed
          LINE_COUNT=$(wc -l < flutter/engine/src/build/config/termux/BUILD.gn)
          echo "File has $LINE_COUNT lines"
          
          # Look for config("sdk") block and ensure it's properly closed
          if grep -q 'config("sdk")' flutter/engine/src/build/config/termux/BUILD.gn; then
            echo "Found config('sdk') block"
            
            # Check if the file ends properly by looking for the specific pattern
            LAST_5_LINES=$(tail -5 flutter/engine/src/build/config/termux/BUILD.gn)
            echo "=== Last 5 lines ==="
            echo "$LAST_5_LINES"
            
            # Count braces in the sdk config section
            SDK_SECTION=$(sed -n '/config("sdk")/,$p' flutter/engine/src/build/config/termux/BUILD.gn)
            OPEN_BRACES=$(echo "$SDK_SECTION" | grep -o '{' | wc -l)
            CLOSE_BRACES=$(echo "$SDK_SECTION" | grep -o '}' | wc -l)
            echo "SDK section: Open braces=$OPEN_BRACES, Close braces=$CLOSE_BRACES"
            
            if [ "$OPEN_BRACES" -gt "$CLOSE_BRACES" ]; then
              echo "=== FIXING: Missing closing brace detected ==="
              echo "}" >> flutter/engine/src/build/config/termux/BUILD.gn
              echo "Added missing closing brace"
              
              echo "=== File after fix ==="
              tail -5 flutter/engine/src/build/config/termux/BUILD.gn | cat -n
            else
              echo "Brace count appears correct"
            fi
          else
            echo "ERROR: config('sdk') block not found!"
          fi
          
          # Validate GN syntax
          echo "=== Final validation ==="
          if tail -1 flutter/engine/src/build/config/termux/BUILD.gn | grep -q '^}$'; then
            echo "File ends with closing brace - looks good"
          else
            echo "WARNING: File does not end with closing brace"
            echo "Last line: '$(tail -1 flutter/engine/src/build/config/termux/BUILD.gn)'"
          fi
          
        else
          echo "ERROR: termux BUILD.gn does NOT exist after patch application"
          echo "This indicates patch application failed completely"
          exit 1
        fi

    - name: fallback - recreate BUILD.gn if needed
      run: |
        echo "=== Fallback BUILD.gn recreation if needed ==="
        
        # Check if we need to recreate the file due to persistent syntax errors
        if [ -f "flutter/engine/src/build/config/termux/BUILD.gn" ]; then
          # Test the file by checking if it has proper structure
          if ! grep -q 'config("sdk")' flutter/engine/src/build/config/termux/BUILD.gn || \
             [ $(grep -c '{' flutter/engine/src/build/config/termux/BUILD.gn) -ne $(grep -c '}' flutter/engine/src/build/config/termux/BUILD.gn) ]; then
            echo "BUILD.gn appears to have structural issues, recreating from scratch..."
            
            # Backup the problematic file
            cp flutter/engine/src/build/config/termux/BUILD.gn flutter/engine/src/build/config/termux/BUILD.gn.backup
            
            # Create the corrected BUILD.gn file using a simple approach
            echo "Recreating BUILD.gn with guaranteed correct structure..."
            
            # Copy from patch to get the base content, then ensure it's complete
            cp flutter/engine/src/build/config/termux/BUILD.gn.backup flutter/engine/src/build/config/termux/BUILD.gn.working || echo "No backup found"
            
            # Manually ensure the sdk config block is complete
            cat > flutter/engine/src/build/config/termux/BUILD.gn.complete << 'FINAL_EOF'
import("//build/config/termux/termux.gni")
import("//build/config/sysroot.gni")
import("//build/config/profiler.gni")

config("compiler") {
  if (current_toolchain == "//build/toolchain/termux:${current_cpu}") {
    cflags = [
      "-fno-strict-aliasing",
      "-fstack-protector", 
      "--param=ssp-buffer-size=8",
      "-fPIC",
      "-pipe",
      "-fcolor-diagnostics",
      "-ffunction-sections",
      "-funwind-tables",
      "-fno-short-enums",
      "-nostdinc++",
    ]
    cflags_cc = ["-fvisibility-inlines-hidden"]
    cflags_objcc = ["-fvisibility-inlines-hidden"]
    ldflags = [
      "-Wl,--fatal-warnings",
      "-fPIC",
      "-Wl,-z,noexecstack",
      "-Wl,-z,now",
      "-Wl,-z,relro",
      "-Wl,--undefined-version",
      "-Wl,--no-undefined",
      "-Wl,--exclude-libs,ALL",
      "-Wl,--icf=all",
      "-Wl,-z,max-page-size=65536",
    ]
    defines = [
      "__TERMUX__",
      "HAVE_SYS_UIO_H"
    ]
    if (!using_sanitizer) {
      ldflags += [ "-Wl,-z,defs" ]
    }
    if (enable_profiling && !is_debug) {
      defines += [ "ENABLE_PROFILING" ]
      cflags += [
        "-fno-omit-frame-pointer",
        "-mno-omit-leaf-frame-pointer",
        "-g",
      ]
      if (enable_full_stack_frames_for_profiling) {
        cflags += [
          "-fno-inline",
          "-fno-optimize-sibling-calls",
        ]
      }
      ldflags += [ "-rdynamic" ]
    }
    if (using_sanitizer) {
      cflags += [
        "-fno-omit-frame-pointer",
        "-gline-tables-only",
      ]
    }
    if (is_asan) {
      cflags += [ "-fsanitize=address" ]
      ldflags += [ "-fsanitize=address" ]
    }
    if (is_lsan) {
      cflags += [ "-fsanitize=leak" ]
      ldflags += [ "-fsanitize=leak" ]
    }
    if (is_tsan) {
      cflags += [ "-fsanitize=thread" ]
      ldflags += [ "-fsanitize=thread" ]
    }
    if (is_msan) {
      cflags += [ "-fsanitize=memory" ]
      ldflags += [ "-fsanitize=memory" ]
    }
    if (is_ubsan) {
      cflags += [ "-fsanitize=undefined" ]
      ldflags += [ "-fsanitize=undefined" ]
    }
    if (current_cpu == "x64") {
      cflags += [
        "-m64",
        "-march=x86-64",
      ]
      ldflags += [ "-m64" ]
    } else if (current_cpu == "x86") {
      cflags += [ "-m32" ]
      ldflags += [ "-m32" ]
      if (is_clang) {
        cflags += [
          "-mstack-alignment=16",
          "-mstackrealign",
        ]
      }
    } else if (current_cpu == "arm") {
      cflags += [
        "-march=$arm_arch",
        "-mfloat-abi=$arm_float_abi",
      ]
      if (arm_tune != "") {
        cflags += [ "-mtune=$arm_tune" ]
      }
      if (arm_use_thumb) {
        cflags += [ "-mthumb" ]
      }
    }
    if (current_cpu == "arm") {
      cflags += [ "--target=arm-linux-androideabi${termux_api_level}" ]
      ldflags += [ "--target=arm-linux-androideabi${termux_api_level}" ]
    } else if (current_cpu == "arm64") {
      cflags += [ "--target=aarch64-linux-android${termux_api_level}" ]
      ldflags += [ "--target=aarch64-linux-android${termux_api_level}" ]
    } else if (current_cpu == "x86") {
      cflags += [ "--target=i686-linux-androideabi${termux_api_level}" ]
      ldflags += [ "--target=i686-linux-androideabi${termux_api_level}" ]
    } else if (current_cpu == "x64") {
      cflags += [ "--target=x86_64-linux-androideabi${termux_api_level}" ]
      ldflags += [ "--target=x86_64-linux-androideabi${termux_api_level}" ]
    }
    asmflags = cflags
  } else {
    configs = ["//build/config/compiler:compiler"]
  }
}

config("runtime_library") {
  if (current_toolchain == "//build/toolchain/termux:${current_cpu}") {
    cflags_cc = ["-nostdinc++"]
    cflags_objcc = [ "-nostdinc++" ]
    defines = [
      "__compiler_offsetof=__builtin_offsetof",
      "nan=__builtin_nan"
    ]
    ldflags = [
      "-stdlib=libstdc++",
      "-Wl,--warn-shared-textrel"
    ]
    lib_dirs = [ "$custom_toolchain/lib/clang/19/lib/linux/" ]
    include_dirs = [
      "//flutter/third_party/libcxx/include",
      "//flutter/third_party/libcxxabi/include",
    ]
  } else {
    configs = ["//build/config/compiler:runtime_library"]
  }
}

config("executable_ldconfig") {
  if (current_toolchain == "//build/toolchain/termux:${current_cpu}") {
    ldflags = [
      "-Bdynamic",
      "-Wl,-z,nocopyreloc",
    ]
  } else {
    configs = ["//build/config/gcc:executable_ldconfig"]
  }
}

config("sdk") {
  cflags = []
  ldflags = [ "-Wl,-rpath=/data/data/com.termux/files/usr/lib" ]
  libs = [ "log" ]
  lib_dirs = [ "$custom_toolchain/lib/clang/19/lib/linux/" ]
  if (defined(target_sysroot) && target_sysroot != "") {
    cflags += [ "--sysroot=" + target_sysroot ]
    ldflags += [ "--sysroot=" + target_sysroot ]
  }
  if (defined(custom_sysroot) && custom_sysroot != "") {
    cflags += [ "-idirafter$custom_sysroot/usr/include" ]
    lib_dirs += [ "$custom_sysroot/usr/lib" ]
  }
}
FINAL_EOF
            
            # Replace the problematic file with the complete version
            mv flutter/engine/src/build/config/termux/BUILD.gn.complete flutter/engine/src/build/config/termux/BUILD.gn
            
            echo "=== BUILD.gn recreated from scratch ==="
            echo "File now has $(wc -l < flutter/engine/src/build/config/termux/BUILD.gn) lines"
            echo "=== Last 5 lines of recreated file ==="
            tail -5 flutter/engine/src/build/config/termux/BUILD.gn | cat -n
            
          else
            echo "BUILD.gn appears to have correct structure, proceeding with build"
          fi
        else
          echo "BUILD.gn does not exist, this should not happen at this point"
        fi

    - name: build
      run: python build.py

    - name: debug - check termux BUILD.gn after build failure
      if: failure()
      run: |
        echo "=== Checking termux BUILD.gn after build failure ==="
        if [ -f "flutter/engine/src/build/config/termux/BUILD.gn" ]; then
          echo "=== termux BUILD.gn content after patch ==="
          cat flutter/engine/src/build/config/termux/BUILD.gn
          echo ""
          echo "=== Line count ==="
          wc -l flutter/engine/src/build/config/termux/BUILD.gn
          echo ""
          echo "=== Last 10 lines with line numbers ==="
          tail -10 flutter/engine/src/build/config/termux/BUILD.gn | cat -n
          echo ""
          echo "=== Hex dump of last 50 bytes ==="
          tail -c 50 flutter/engine/src/build/config/termux/BUILD.gn | hexdump -C
        else
          echo "termux BUILD.gn still does NOT exist after build failure"
        fi

    - name: parse tag
      id: parser
      run: |
        TAG=$(NO_RECORD=1 python build.py tag)
        echo "TAG=$TAG" >> $GITHUB_OUTPUT
        echo "TITLE=Flutter $TAG" >> $GITHUB_OUTPUT

    - name: release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.parser.outputs.TAG }}
        name: ${{ steps.parse_toml.outputs.TITLE }}
        files: '**/*.deb'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
